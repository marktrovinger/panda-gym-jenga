_current_progress_remaining:
    value: 1
_custom_logger:
    value: "False"
_episode_num:
    value: 0
_episode_storage:
    value: None
_last_episode_starts:
    value: '[ True]'
_last_obs:
    value: |-
        OrderedDict([('achieved_goal', array([[ 0.00391476,  0.1435116 ,  0.02      , -0.10080379, -0.08294378,
                 0.06      ,  0.1258664 ,  0.00297238,  0.12      ]],
              dtype=float32)), ('desired_goal', array([[-0.13978519,  0.09569454,  0.02      , -0.13978519,  0.09569454,
                 0.06      , -0.13978519,  0.09569454,  0.12      ]],
              dtype=float32)), ('observation', array([[ 3.84396687e-02, -2.19447225e-12,  1.97400138e-01,
                 0.00000000e+00, -0.00000000e+00,  0.00000000e+00,
                 0.00000000e+00,  3.91476136e-03,  1.43511593e-01,
                 1.99999996e-02,  0.00000000e+00, -0.00000000e+00,
                 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                 0.00000000e+00, -1.00803785e-01, -8.29437822e-02,
                 5.99999987e-02,  0.00000000e+00, -0.00000000e+00,
                 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                 0.00000000e+00,  1.25866398e-01,  2.97238235e-03,
                 1.19999997e-01,  0.00000000e+00, -0.00000000e+00,
                 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                 0.00000000e+00]], dtype=float32))])
_last_original_obs:
    value: None
_logger:
    value: <stable_baselines3.common.logger.Logger object at 0x738ec3f15900>
_n_updates:
    value: 0
_num_timesteps_at_start:
    value: 0
_stats_window_size:
    value: 100
_total_timesteps:
    value: 1e+06
_vec_normalize_env:
    value: None
_wandb:
    value:
        cli_version: 0.19.0
        code_path: code/scripts/test_ddpg_stack3.py
        m: []
        python_version: 3.10.16
        t:
            "1":
                - 1
                - 55
            "2":
                - 1
                - 55
            "3":
                - 1
                - 2
                - 3
                - 16
                - 22
                - 23
                - 35
                - 55
            "4": 3.10.16
            "5": 0.19.0
            "8":
                - 5
            "12": 0.19.0
            "13": linux-x86_64
action_noise:
    value: None
action_space:
    value: Box(-1.0, 1.0, (4,), float32)
actor:
    value: |-
        Actor(
          (features_extractor): CombinedExtractor(
            (extractors): ModuleDict(
              (achieved_goal): Flatten(start_dim=1, end_dim=-1)
              (desired_goal): Flatten(start_dim=1, end_dim=-1)
              (observation): Flatten(start_dim=1, end_dim=-1)
            )
          )
          (mu): Sequential(
            (0): Linear(in_features=61, out_features=400, bias=True)
            (1): ReLU()
            (2): Linear(in_features=400, out_features=300, bias=True)
            (3): ReLU()
            (4): Linear(in_features=300, out_features=4, bias=True)
            (5): Tanh()
          )
        )
actor_batch_norm_stats:
    value: '[]'
actor_batch_norm_stats_target:
    value: '[]'
actor_target:
    value: |-
        Actor(
          (features_extractor): CombinedExtractor(
            (extractors): ModuleDict(
              (achieved_goal): Flatten(start_dim=1, end_dim=-1)
              (desired_goal): Flatten(start_dim=1, end_dim=-1)
              (observation): Flatten(start_dim=1, end_dim=-1)
            )
          )
          (mu): Sequential(
            (0): Linear(in_features=61, out_features=400, bias=True)
            (1): ReLU()
            (2): Linear(in_features=400, out_features=300, bias=True)
            (3): ReLU()
            (4): Linear(in_features=300, out_features=4, bias=True)
            (5): Tanh()
          )
        )
algo:
    value: DDPG
batch_size:
    value: 256
buffer_size:
    value: 1000000
critic:
    value: |-
        ContinuousCritic(
          (features_extractor): CombinedExtractor(
            (extractors): ModuleDict(
              (achieved_goal): Flatten(start_dim=1, end_dim=-1)
              (desired_goal): Flatten(start_dim=1, end_dim=-1)
              (observation): Flatten(start_dim=1, end_dim=-1)
            )
          )
          (qf0): Sequential(
            (0): Linear(in_features=65, out_features=400, bias=True)
            (1): ReLU()
            (2): Linear(in_features=400, out_features=300, bias=True)
            (3): ReLU()
            (4): Linear(in_features=300, out_features=1, bias=True)
          )
        )
critic_batch_norm_stats:
    value: '[]'
critic_batch_norm_stats_target:
    value: '[]'
critic_target:
    value: |-
        ContinuousCritic(
          (features_extractor): CombinedExtractor(
            (extractors): ModuleDict(
              (achieved_goal): Flatten(start_dim=1, end_dim=-1)
              (desired_goal): Flatten(start_dim=1, end_dim=-1)
              (observation): Flatten(start_dim=1, end_dim=-1)
            )
          )
          (qf0): Sequential(
            (0): Linear(in_features=65, out_features=400, bias=True)
            (1): ReLU()
            (2): Linear(in_features=400, out_features=300, bias=True)
            (3): ReLU()
            (4): Linear(in_features=300, out_features=1, bias=True)
          )
        )
device:
    value: cuda
env:
    value: <stable_baselines3.common.vec_env.vec_video_recorder.VecVideoRecorder object at 0x738fb8771ae0>
env_name:
    value: JengaStack3-v3
ep_info_buffer:
    value: deque([], maxlen=100)
ep_success_buffer:
    value: deque([], maxlen=100)
gamma:
    value: 0.99
gradient_steps:
    value: 1
learning_rate:
    value: 0.001
learning_starts:
    value: 100
lr_schedule:
    value: <function get_schedule_fn.<locals>.<lambda> at 0x738fb5d12950>
n_envs:
    value: 1
num_timesteps:
    value: 0
observation_space:
    value: 'Dict(''achieved_goal'': Box(-10.0, 10.0, (9,), float32), ''desired_goal'': Box(-10.0, 10.0, (9,), float32), ''observation'': Box(-10.0, 10.0, (43,), float32))'
optimize_memory_usage:
    value: "False"
policy:
    value: |-
        MultiInputPolicy(
          (actor): Actor(
            (features_extractor): CombinedExtractor(
              (extractors): ModuleDict(
                (achieved_goal): Flatten(start_dim=1, end_dim=-1)
                (desired_goal): Flatten(start_dim=1, end_dim=-1)
                (observation): Flatten(start_dim=1, end_dim=-1)
              )
            )
            (mu): Sequential(
              (0): Linear(in_features=61, out_features=400, bias=True)
              (1): ReLU()
              (2): Linear(in_features=400, out_features=300, bias=True)
              (3): ReLU()
              (4): Linear(in_features=300, out_features=4, bias=True)
              (5): Tanh()
            )
          )
          (actor_target): Actor(
            (features_extractor): CombinedExtractor(
              (extractors): ModuleDict(
                (achieved_goal): Flatten(start_dim=1, end_dim=-1)
                (desired_goal): Flatten(start_dim=1, end_dim=-1)
                (observation): Flatten(start_dim=1, end_dim=-1)
              )
            )
            (mu): Sequential(
              (0): Linear(in_features=61, out_features=400, bias=True)
              (1): ReLU()
              (2): Linear(in_features=400, out_features=300, bias=True)
              (3): ReLU()
              (4): Linear(in_features=300, out_features=4, bias=True)
              (5): Tanh()
            )
          )
          (critic): ContinuousCritic(
            (features_extractor): CombinedExtractor(
              (extractors): ModuleDict(
                (achieved_goal): Flatten(start_dim=1, end_dim=-1)
                (desired_goal): Flatten(start_dim=1, end_dim=-1)
                (observation): Flatten(start_dim=1, end_dim=-1)
              )
            )
            (qf0): Sequential(
              (0): Linear(in_features=65, out_features=400, bias=True)
              (1): ReLU()
              (2): Linear(in_features=400, out_features=300, bias=True)
              (3): ReLU()
              (4): Linear(in_features=300, out_features=1, bias=True)
            )
          )
          (critic_target): ContinuousCritic(
            (features_extractor): CombinedExtractor(
              (extractors): ModuleDict(
                (achieved_goal): Flatten(start_dim=1, end_dim=-1)
                (desired_goal): Flatten(start_dim=1, end_dim=-1)
                (observation): Flatten(start_dim=1, end_dim=-1)
              )
            )
            (qf0): Sequential(
              (0): Linear(in_features=65, out_features=400, bias=True)
              (1): ReLU()
              (2): Linear(in_features=400, out_features=300, bias=True)
              (3): ReLU()
              (4): Linear(in_features=300, out_features=1, bias=True)
            )
          )
        )
policy_class:
    value: <class 'stable_baselines3.td3.policies.MultiInputPolicy'>
policy_delay:
    value: 1
policy_kwargs:
    value: '{''n_critics'': 1}'
policy_type:
    value: MultiInputPolicy
replay_buffer:
    value: <stable_baselines3.her.her_replay_buffer.HerReplayBuffer object at 0x738fa8420e80>
replay_buffer_class:
    value: <class 'stable_baselines3.her.her_replay_buffer.HerReplayBuffer'>
replay_buffer_kwargs:
    value: '{''n_sampled_goal'': 4, ''goal_selection_strategy'': ''future''}'
sde_sample_freq:
    value: -1
seed:
    value: None
start_time:
    value: 1733838057484575337
target_noise_clip:
    value: 0
target_policy_noise:
    value: 0.1
tau:
    value: 0.005
tensorboard_log:
    value: runs/ak8xxv6q
total_timesteps:
    value: 1e+06
train_freq:
    value: 'TrainFreq(frequency=1, unit=<TrainFrequencyUnit.STEP: ''step''>)'
use_sde:
    value: "False"
use_sde_at_warmup:
    value: "False"
verbose:
    value: 1
