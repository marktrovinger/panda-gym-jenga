diff --git a/panda_gym_jenga.egg-info/SOURCES.txt b/panda_gym_jenga.egg-info/SOURCES.txt
index 1c7b6e6..5b0ac47 100644
--- a/panda_gym_jenga.egg-info/SOURCES.txt
+++ b/panda_gym_jenga.egg-info/SOURCES.txt
@@ -12,6 +12,7 @@ panda_gym_jenga/envs/jenga_tasks.py
 panda_gym_jenga/envs/robot/__init__.py
 panda_gym_jenga/envs/robot/kinova.py
 panda_gym_jenga/envs/tasks/__init__.py
+panda_gym_jenga/envs/tasks/jenga_tower.py
 panda_gym_jenga/envs/tasks/jengapickandplace.py
 panda_gym_jenga/envs/tasks/simplejengapickandplace.py
 panda_gym_jenga/envs/tasks/stack3.py
diff --git a/panda_gym_jenga/envs/jenga_tasks.py b/panda_gym_jenga/envs/jenga_tasks.py
index c605956..34f9488 100644
--- a/panda_gym_jenga/envs/jenga_tasks.py
+++ b/panda_gym_jenga/envs/jenga_tasks.py
@@ -8,6 +8,58 @@ from panda_gym.envs.robots.panda import Panda
 from panda_gym_jenga.envs.tasks.jengapickandplace import JengaPickAndPlace
 from panda_gym_jenga.envs.tasks.stack3 import JengaStack3
 from panda_gym_jenga.envs.tasks.simplejengapickandplace import JengaSimplePickAndPlace 
+from panda_gym_jenga.envs.tasks.jenga_tower import JengaTower
+
+
+
+class JengaTowerEnv(RobotTaskEnv):
+    """Pick and place task for Jenga blocks with the Panda robot.
+    Args:
+        render_mode (str, optional): Render mode. Defaults to "rgb_array".
+        reward_type (str, optional): "sparse" or "dense". Defaults to "sparse".
+        control_type (str, optional): "ee" to control end-effector position or "joints" to control joint values.
+            Defaults to "ee".
+        renderer (str, optional): Renderer, either "Tiny" or OpenGL". Defaults to "Tiny" if render mode is "human"
+            and "OpenGL" if render mode is "rgb_array". Only "OpenGL" is available for human render mode.
+        render_width (int, optional): Image width. Defaults to 720.
+        render_height (int, optional): Image height. Defaults to 480.
+        render_target_position (np.ndarray, optional): Camera targeting this position, as (x, y, z).
+            Defaults to [0., 0., 0.].
+        render_distance (float, optional): Distance of the camera. Defaults to 1.4.
+        render_yaw (float, optional): Yaw of the camera. Defaults to 45.
+        render_pitch (float, optional): Pitch of the camera. Defaults to -30.
+        render_roll (int, optional): Roll of the camera. Defaults to 0.
+        object_size (str, optional): Size of the Jenga block. Defaults to large (0.12 x 0.0381 x 0.0254) meters
+    """
+    def __init__(
+            self,
+            reward_type: str = "sparse",
+            control_type: str = "ee",
+            renderer: str = "Tiny",
+            render_mode: str ="rgb_array",
+            render_width = 720, 
+            render_height = 480, 
+            render_target_position = None, 
+            render_distance = 1.4, 
+            render_yaw = 45, 
+            render_pitch = -30, 
+            render_roll = 0,
+            object_size: str = "large"
+        ) -> None:
+        sim = PyBullet(render_mode=render_mode, renderer=renderer)
+        robot = Panda(sim, block_gripper=False, base_position=np.array([-0.6, 0.0, 0.0]), control_type=control_type)
+        task = JengaTower(sim, reward_type=reward_type, object_size=object_size)
+        super().__init__(
+            robot, 
+            task, 
+            render_width, 
+            render_height, 
+            render_target_position, 
+            render_distance, 
+            render_yaw, 
+            render_pitch, 
+            render_roll
+        )
 
 
 class JengaPickAndPlaceEnv(RobotTaskEnv):
diff --git a/wandb/latest-run b/wandb/latest-run
index 7bbdc38..ff424b0 120000
--- a/wandb/latest-run
+++ b/wandb/latest-run
@@ -1 +1 @@
-run-20241220_153549-u7osx6vg
\ No newline at end of file
+run-20241223_111321-6oztrive
\ No newline at end of file
